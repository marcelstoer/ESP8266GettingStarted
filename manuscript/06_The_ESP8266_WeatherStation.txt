# The ESP8266 WeatherStation

In this chapter we will get the WeatherStation to run. We will install several libraries used for setting up access to the internet, for reading and parsing the data from the service providing your local weather forecasts, as well as a library to display the data on the OLED display. Then we will adjust the WeatherStation code to display your local weather information and get a so-called API key to access the weather forecast service.

## Installing the libraries


Please make sure that you have installed the display library in the last chapter. In order to get the WeatherStation to compile you will have to download two more libraries. The first library is the WeatherStation itself. This will give you some new entries in the Example menu of the Arduino IDE. The second one is to read and understand the data which the program gets from the weather forecast service.

Go to `Sketch > Include Library… > Manage Libraries…` and install the following two libraries:

![ESP8266 Weather Station Library](images/ESP8266WeatherStationLibrary.png)

![Json Streaming Parser Library](images/JsonStreamingParser.png)

## Open the Weather Station Example

You have now installed the three required libraries. Often Arduino libraries contain example sketches which behave like a template to kick-start your project. If you have already worked with the Arduino IDE you might have used other demo sketches before. In the last chapter we used the Wifi Scanner Sketch. Now we are going to use the WeatherStation template to get started.
Go to `File > Examples > ESP8266 Weather Station > WeatherStationDemo`
Save the new sketch with a good name in a location you will remember - but leave it open.

## Getting the OpenWeatherMap API Key

I> **API (Key)**: What is an API and what is an API Key? Application Programming Interfaces (APIs) are a well-defined way on how one piece of code can talk to another. This can be on the same device, but often refers to the communication between two devices connected by a network. For the WeatherStation we need to get current and forecast data in a machine-readable format. To do this we will call the API of a service called OpenWeatherMap. OpenWeatherMap has different price plans and we will use the Free plan which has some limitations to distinguish it from the per-pay plan. To have better control over the users who access the service we will have to get a short text value - the API key - before we can call it. You should treat API keys like a password and be careful with them. For instance, do not post them to a forum, and don’t commit them to a public code repository. If you do your key may be cancelled, and all your projects will fail!

To get the OpenWeatherMap API key go to <https://openweathermap.org/appid> and click on the sign up button. Then get your API key from this page:

![OpenWeatherMap Signup Page](images/OpenWeatherMapSignup.png)
![OpenWeatherMap API Key Page](images/OpenWeatherMapKey.png)

If you should forget your key you can always come back and get it here.

## Configuring the Weather Station
Earlier when you chose the WeatherStation example you created a copy of the code included in the library. This code needs to be adapted so that it works for you. There are better options than putting configuration into your code: we could for instance offer a web interface where you could configure your settings. This would be much better since you could change values without changing the code, which would require compiling a new firmware and sending it over to the device. But to get started we will try to keep things simple…

* Let’s start with the **WiFi Settings**. Replace *yourssid* with the name of your WiFi network and *yourpassw0rd* with its password. I had problems with a network that contained a dash (“-“) in the SSID. If you are having problems consider this hint…
* Next is the **update interval**. This value specifies how often the weather data should be updated from the internet. The default is 600 seconds (10 minutes). In my experience this is a good value, because you don’t have unlimited requests in your free OpenWeatherMap API account and the weather doesn’t change so often anyway.
* Now to the **Display Settings**. If you attach the display as I show in the next chapter you don’t have to change anything here. `D3` and `D4` are the pin names in the NodeMCU module. If you get compilation errors about them make sure that you have set your board to `NodeMCU V1.0`, if that is the module you are using. If you have another board just replace the pin numbers with the proper pin number, e.g. `5` or `6`.
* Use the **Time Client Settings** section to adjust your local time zone offset compared to the UTC time zone. It also allows a half-hour offset, thanks to the user who lives in such a time zone and made me implement that. (Ignorance is bliss until you get confronted with it…)
* In the OpenWeatherMap section you can now use the **API key** you received in the previous section. Also set the **country and city** of the place you want to show. To figure out which values work you can modify this URL: <http://api.openweathermap.org/data/2.5/weather?q=zurich,ch&appid=APIKEY&units=metric> and replace `APIKEY` with yours and `CA` and `zurich,ch` with your state or country and city.

## Connecting the Hardware

We are going to use the same setup as described in the beginning of the last chapter. For completeness I'm going show the wiring diagram again: 

![Wiring the Weather Station](images/Wiring.png)

Please note: there are versions of the OLED display with swapped `GND` and `VCC` pins. Be careful to connect them according to the printed labels, not (necessarily) this diagram!

| NodeMCU Pin | OLED Display Pin |
|-------------|------------------|
| 3V3         | VCC              |
| GND         | GND              |
| D3          | SDA              |
| D4          | SCL              |


## First Run
Now we’re all set to run the WeatherStation software for the first time. Click on the Upload arrow and wait until the compilation and the transfer have ended. Now you should see the OLED display lighting up and displaying a WiFi icon. The module should now be trying to acquire access to the wireless network you have defined earlier.

This is just the beginning. In the next chapter I’ll give you some ideas of what else you can build with the WeatherStation hardware.

## Summary
If everything went well you now have a working ESP8266 WeatherStation. Congratulations! Let’s look back what we did in this chapter:

1. We used the WeatherStation example and created a working copy for us. All changes will be applied to the copy, not the original example. If you accidentally make your code unusable you can always go back to the example and start with a fresh copy.
2. We installed several libraries by using the Arduino IDE Library Manager. Libraries help us to reuse code or binaries in many places without using barely maintainable copy/paste code.
3. We created an API key from OpenWeatherMap. Every time we call the OpenWeatherMap API to update weather data we will send this key along so that OpenWeatherMap knows who we are. Many service providers use a similar scheme to control and limit usage of their services.
4. We changed a few lines in the code to configure the WiFi settings, update interval, display pins, timezone and the API key for OpenWeatherMap.
5. We connected the OLED display and the ESP8266 and uploaded the firmware.
